import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import pytz
import requests
import altair as alt
import os

# ----------------- –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø -----------------
st.subheader("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"):
    st.code(os.popen('pip list').read())
# ---------------------------------------------------------

# –ù–∞–¥—ë–∂–Ω—ã–π –∏–º–ø–æ—Ä—Ç ARIMA
try:
    from statsmodels.tsa.arima.model import ARIMA
    st.success("Statsmodels (–Ω–æ–≤—ã–π –ø—É—Ç—å) –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
except ImportError:
    try:
        from statsmodels.tsa.arima_model import ARIMA
        st.success("Statsmodels (—Å—Ç–∞—Ä—ã–π –ø—É—Ç—å) –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    except ImportError as e:
        st.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: Statsmodels –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å requirements.txt –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. {e}")
        st.stop()


MOSCOW_TZ = pytz.timezone("Europe/Moscow")

@st.cache_data(show_spinner=False, ttl=3600)
def load_coingecko_daily(coin_id, days=730):
    url = f"https://api.coingecko.com/api/v3/coins/{coin_id}/market_chart"
    params = {"vs_currency": "usd", "days": days, "interval": "daily"}
    try:
        r = requests.get(url, params=params, timeout=20)
        r.raise_for_status()
        data = r.json()
        px = data["prices"]
        df = pd.DataFrame(px, columns=["ts_ms", "close"])
        df["date"] = pd.to_datetime(df["ts_ms"], unit="ms").dt.tz_localize("UTC").dt.tz_convert(MOSCOW_TZ).dt.date
        df = df[["date", "close"]].drop_duplicates("date").reset_index(drop=True)
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def arima_forecast(y, steps=7, order=(4,1,1), use_log=True):
    if len(y) < max(30, order[0] + order[2] + 5):
        return None
    y = np.asarray(y, dtype=float)
    y_tr = np.log(y) if use_log else y
    
    try:
        model = ARIMA(y_tr, order=order)
        res = model.fit()
        fc = res.forecast(steps=steps)
        return np.exp(fc) if use_log else np.asarray(fc, dtype=float)
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ ARIMA: {e}")
        return None

st.set_page_config(page_title="ARIMA BTC", page_icon="üìà", layout="wide")
st.title("üìà ARIMA(4,1,1) ‚Äî Bitcoin (CoinGecko)")
with st.sidebar:
    crypto = st.text_input("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ (CoinGecko id)", value="bitcoin")
    train_period = st.selectbox("–ü–µ—Ä–∏–æ–¥ –æ–±—É—á–µ–Ω–∏—è (–¥–Ω–µ–π)", [30, 60, 90, 180, 365], index=3)
    steps = st.slider("–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ (–¥–Ω–µ–π)", 1, 14, 7)
    use_log = st.checkbox("–õ–æ–≥-—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", True)

df = load_coingecko_daily(crypto, days=max(365, train_period + 30))
if df is None:
    st.stop()

y_all = df["close"].values.astype(float)
y_train = y_all[-train_period:]

fc = arima_forecast(y_train, steps=steps, order=(4,1,1), use_log=use_log)
if fc is None:
    st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ARIMA. –£–≤–µ–ª–∏—á—å –ø–µ—Ä–∏–æ–¥ –æ–±—É—á–µ–Ω–∏—è.")
    st.stop()

col1, col2, col3 = st.columns(3)
with col1: st.metric("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", f"${y_all[-1]:,.2f}")
with col2: st.metric("–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑", f"${np.mean(fc):,.2f}")
with col3: st.metric("–ú–æ–¥–µ–ª—å", "ARIMA(4,1,1)")

hist_tail = min(100, len(y_all))
hist_df = pd.DataFrame({"idx": range(hist_tail), "price": y_all[-hist_tail:], "type": "–ò—Å—Ç–æ—Ä–∏—è"})
forecast_df = pd.DataFrame({"idx": range(hist_tail - 1, hist_tail + steps), "price": np.insert(fc, 0, y_all[-1]), "type": "–ü—Ä–æ–≥–Ω–æ–∑"})

chart_df = pd.concat([hist_df, forecast_df])

chart = alt.Chart(chart_df).mark_line(point=True).encode(
    x=alt.X("idx:Q", title="–ü–µ—Ä–∏–æ–¥"),
    y=alt.Y("price:Q", title="USD", scale=alt.Scale(zero=False)),
    color=alt.Color("type:N", scale=alt.Scale(domain=["–ò—Å—Ç–æ—Ä–∏—è", "–ü—Ä–æ–≥–Ω–æ–∑"], range=["#1f77b4", "#ff7f0e"])),
    tooltip=["type", "price"]
).properties(height=420).interactive()

st.altair_chart(chart, use_container_width=True)
st.caption(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now(MOSCOW_TZ).strftime('%Y-%m-%d %H:%M:%S')} –ú–°–ö")

