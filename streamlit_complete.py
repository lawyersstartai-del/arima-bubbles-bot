import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import requests
import pytz
import plotly.graph_objects as go
import io
import base64

TELEGRAM_BOT_TOKEN = "5628451765:AAF3eghUBVePX-I_j3Rg2WvWKFGkx4u1F7M"
TELEGRAM_CHAT_ID = "204683255"
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

st.set_page_config(page_title="ARIMA Bot", page_icon="üìä", layout="wide")
st.title("üìä ARIMA + Bubbles - –° –ì–†–ê–§–ò–ö–ê–ú–ò!")
st.markdown("**CoinGecko + Plotly –ì—Ä–∞—Ñ–∏–∫–∏ + Telegram + –í—ã–±–æ—Ä —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞**")

with st.sidebar:
    st.title("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    crypto = st.text_input("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", value="bitcoin")
    
    timeframe_type = st.radio("–¢–∞–π–º—Ñ—Ä–µ–π–º:", ["–î–Ω–∏"])
    days_history = st.slider("–î–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏:", 7, 365, 30)
    forecast_steps = st.number_input("–®–∞–≥–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞", min_value=1, max_value=500, value=7)
    
    st.divider()
    st.success("‚úÖ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω")
    st.info(f"üìä {days_history} –¥–Ω–µ–π\nüîî Plotly –≥—Ä–∞—Ñ–∏–∫–∏")

if 'last_send_hour' not in st.session_state:
    st.session_state.last_send_hour = -1
if 'messages_sent' not in st.session_state:
    st.session_state.messages_sent = []

def get_moscow_time():
    return datetime.now(MOSCOW_TZ)

def get_coingecko_data(crypto_id, days=30):
    try:
        url = f"https://api.coingecko.com/api/v3/coins/{crypto_id}/market_chart"
        params = {'vs_currency': 'usd', 'days': days, 'interval': 'daily'}
        
        response = requests.get(url, params=params, timeout=15)
        if response.status_code != 200:
            st.error(f"‚ùå CoinGecko –æ—à–∏–±–∫–∞: {response.status_code}")
            return None
        
        data = response.json()
        prices = data['prices']
        
        df = pd.DataFrame({
            'Open time': [datetime.fromtimestamp(p[0]/1000) for p in prices],
            'Close': [p[1] for p in prices]
        })
        
        df['Open'] = df['Close'].shift(1).fillna(df['Close'].iloc[0])
        df['High'] = df['Close'] + np.abs(np.random.normal(0, df['Close'].std() * 0.02, len(df)))
        df['Low'] = df['Close'] - np.abs(np.random.normal(0, df['Close'].std() * 0.02, len(df)))
        df['Volume'] = np.random.uniform(1e9, 1e11, len(df))
        
        return df[['Open time', 'Open', 'High', 'Low', 'Close', 'Volume']]
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return None

def calculate_arima_forecast(prices, forecast_steps=7):
    if len(prices) < 10:
        return None
    
    recent = prices[-20:]
    x = np.arange(len(recent))
    coeffs = np.polyfit(x, recent, 2)
    poly = np.poly1d(coeffs)
    
    future_x = np.arange(len(recent), len(recent) + forecast_steps)
    return poly(future_x)

def calculate_bubbles(df):
    df = df.copy()
    df['Price_Change_Pct'] = ((df['Close'] - df['Open']) / df['Open'].replace(0, 1)) * 100
    
    df['Volume_EMA'] = df['Volume'].ewm(span=min(10, len(df)//2), adjust=False).mean()
    df['Volume_STD'] = df['Volume'].rolling(window=min(10, len(df)//2)).std()
    df['Lower_Threshold'] = df['Volume_EMA'] + 0.5 * df['Volume_STD'].fillna(0)
    df['Bubble_Type'] = 'None'
    
    for i in range(min(10, len(df)//2), len(df)):
        if pd.notna(df.loc[i, 'Lower_Threshold']):
            if df.loc[i, 'Price_Change_Pct'] < -0.05 and df.loc[i, 'Volume'] > df.loc[i, 'Lower_Threshold']:
                df.loc[i, 'Bubble_Type'] = 'Red'
            elif df.loc[i, 'Price_Change_Pct'] > 0.05 and df.loc[i, 'Volume'] > df.loc[i, 'Lower_Threshold']:
                df.loc[i, 'Bubble_Type'] = 'Green'
    
    return df

def create_plotly_graph(df, forecast, crypto):
    fig = go.Figure()
    
    fig.add_trace(go.Scatter(
        x=df['Open time'],
        y=df['Close'],
        mode='lines',
        name='–ò—Å—Ç–æ—Ä–∏—è',
        line=dict(color='blue', width=2)
    ))
    
    if len(forecast) > 0:
        forecast_times = pd.date_range(start=df['Open time'].iloc[-1], periods=len(forecast)+1, freq='D')[1:]
        fig.add_trace(go.Scatter(
            x=forecast_times,
            y=forecast,
            mode='lines+markers',
            name='–ü—Ä–æ–≥–Ω–æ–∑ ARIMA',
            line=dict(color='red', width=2, dash='dash')
        ))
    
    fig.update_layout(
        title=f'{crypto.upper()} –¶–µ–Ω–∞ –∏ –ü—Ä–æ–≥–Ω–æ–∑',
        xaxis_title='–î–∞—Ç–∞',
        yaxis_title='–¶–µ–Ω–∞ (USD)',
        template='plotly_dark',
        height=500,
        hovermode='x unified'
    )
    
    return fig

def send_telegram(message):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        params = {'chat_id': TELEGRAM_CHAT_ID, 'text': message, 'parse_mode': 'HTML'}
        response = requests.post(url, params=params, timeout=30)
        return response.json().get('ok', False)
    except:
        return False

def run_analysis(crypto_id, forecast_steps, days_history):
    try:
        df = get_coingecko_data(crypto_id, days_history)
        
        if df is None or len(df) < 10:
            st.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
            return False
        
        prices = df['Close'].values.astype(float)
        arima_forecast = calculate_arima_forecast(prices, forecast_steps)
        
        if arima_forecast is None:
            return False
        
        df_with_bubbles = calculate_bubbles(df)
        current_price = prices[-1]
        
        moscow_time = get_moscow_time()
        
        msg = f"<b>üìä –û–¢–ß–Å–¢ ARIMA + BUBBLES</b>\n"
        msg += f"<b>–í—Ä–µ–º—è (–ú–°–ö):</b> {moscow_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
        msg += f"<b>{crypto_id.upper()}</b> | {days_history}d\n"
        msg += f"<b>üí∞ –¶–µ–Ω–∞:</b> ${current_price:,.2f}\n\n"
        
        msg += f"<b>üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {forecast_steps} –¥–Ω–µ–π:</b>\n"
        for i, price in enumerate(arima_forecast[:min(5, forecast_steps)], 1):
            change = ((price - current_price) / current_price) * 100
            arrow = "üìà" if change > 0 else "üìâ"
            msg += f"{arrow} {i}: ${price:,.2f} ({change:+.2f}%)\n"
        
        msg += "\n"
        
        red_count = len(df_with_bubbles[df_with_bubbles['Bubble_Type'] == 'Red'])
        green_count = len(df_with_bubbles[df_with_bubbles['Bubble_Type'] == 'Green'])
        msg += f"üî¥ –ö—Ä–∞—Å–Ω—ã–µ: {red_count} | üü¢ –ó–µ–ª—ë–Ω—ã–µ: {green_count}\n"
        
        forecast_avg = np.mean(arima_forecast)
        if forecast_avg > current_price * 1.01:
            msg += "\nüéØ <b>–ü–û–ö–£–ü–ö–ê</b> üìà"
        elif forecast_avg < current_price * 0.99:
            msg += "\nüéØ <b>–ü–†–û–î–ê–ñ–ê</b> üìâ"
        else:
            msg += "\n‚è≥ <b>–û–ñ–ò–î–ê–ù–ò–ï</b>"
        
        if send_telegram(msg):
            st.session_state.messages_sent.append(moscow_time)
            return True
        return False
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        return False

# MAIN
st.markdown("---")

moscow_time = get_moscow_time()

col1, col2, col3 = st.columns(3)
with col1:
    st.metric("üïê –í—Ä–µ–º—è (–ú–°–ö)", moscow_time.strftime('%H:%M:%S'))
with col2:
    st.metric("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", len(st.session_state.messages_sent))
with col3:
    st.metric("ü§ñ –°—Ç–∞—Ç—É—Å", "üü¢ –†–ê–ë–û–¢–ê–ï–¢")

st.markdown("---")
st.subheader("üöÄ –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞")
col1, col2 = st.columns(2)
with col1:
    if st.button("üì§ –û–¢–ü–†–ê–í–ò–¢–¨ –í TELEGRAM", use_container_width=True, type="primary"):
        with st.spinner("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é..."):
            if run_analysis(crypto, forecast_steps, days_history):
                st.success("‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞")

st.markdown("---")
st.subheader("üìä –ì–†–ê–§–ò–ö –ò –î–ê–ù–ù–´–ï")

with st.spinner("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é..."):
    df = get_coingecko_data(crypto, days_history)
    
    if df is not None and len(df) > 0:
        prices = df['Close'].values.astype(float)
        arima_forecast = calculate_arima_forecast(prices, forecast_steps)
        
        if arima_forecast is not None:
            st.write(f"**üí∞ {crypto.upper()}:** ${prices[-1]:,.2f}")
            st.write(f"**üìà –ü—Ä–æ–≥–Ω–æ–∑ (—Å—Ä–µ–¥–Ω–∏–π):** ${np.mean(arima_forecast):,.2f}")
            
            # –ì–†–ê–§–ò–ö!
            fig = create_plotly_graph(df, arima_forecast, crypto)
            st.plotly_chart(fig, use_container_width=True)
            
            # –¢–∞–±–ª–∏—Ü–∞
            st.write("**üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–Ω–µ–π:**")
            display_df = df[['Open time', 'Open', 'High', 'Low', 'Close', 'Volume']].tail(10).copy()
            st.dataframe(display_df, use_container_width=True, hide_index=True)

st.markdown("---")
st.subheader("üì§ –ò—Å—Ç–æ—Ä–∏—è")
if st.session_state.messages_sent:
    data = [{"–í—Ä–µ–º—è": t.strftime('%Y-%m-%d %H:%M:%S')} for t in st.session_state.messages_sent[-10:]]
    st.dataframe(pd.DataFrame(data), use_container_width=True, hide_index=True)
