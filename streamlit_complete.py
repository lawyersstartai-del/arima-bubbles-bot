import streamlit as st
import numpy as np
import pandas as pd
import requests
import io
import matplotlib.pyplot as plt
from datetime import datetime
from statsmodels.tsa.arima.model import ARIMA

# ------------------- –ù–ê–°–¢–†–û–ô–ö–ò -------------------
st.set_page_config(page_title="ARIMA BTC", page_icon="üìà", layout="wide")

# –í–°–¢–ê–í–¨ –°–í–û–ò –î–ê–ù–ù–´–ï:
TELEGRAM_BOT_TOKEN = "YOUR_BOT_TOKEN"
TELEGRAM_CHAT_ID   = "YOUR_CHAT_ID"

SEND_PHOTO_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto"
# -------------------------------------------------

st.title("ARIMA –ø—Ä–æ–≥–Ω–æ–∑ BTC + Matplotlib + Telegram")

@st.cache_data(ttl=3600, show_spinner=False)
def load_btc_daily(days: int = 400) -> np.ndarray:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö —Ü–µ–Ω BTC –≤ USD —Å CoinGecko."""
    url = "https://api.coingecko.com/api/v3/coins/bitcoin/market_chart"
    params = {"vs_currency": "usd", "days": days, "interval": "daily"}
    r = requests.get(url, params=params, timeout=30)
    r.raise_for_status()
    data = r.json()
    prices = [p[1] for p in data["prices"]]
    return np.array(prices, dtype=float)

# --------- –ü–ê–†–ê–ú–ï–¢–†–´ UI ----------
train_days   = st.slider("–ü–µ—Ä–∏–æ–¥ –æ–±—É—á–µ–Ω–∏—è (–¥–Ω–µ–π)", 30, 365, 120)
forecast_h   = st.slider("–ü—Ä–æ–≥–Ω–æ–∑ –≤–ø–µ—Ä—ë–¥ (–¥–Ω–µ–π)", 1, 14, 7)
arima_order  = st.text_input("–ü–æ—Ä—è–¥–æ–∫ ARIMA (p,d,q)", "4,1,1")
use_log      = st.checkbox("–õ–æ–≥-—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", True)
# ----------------------------------

# –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ—Ä—è–¥–∫–∞
try:
    p, d, q = map(int, arima_order.split(","))
except Exception:
    st.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—è–¥–∫–∞ ARIMA. –ü—Ä–∏–º–µ—Ä: 4,1,1")
    st.stop()

# –î–∞–Ω–Ω—ã–µ
series_all = load_btc_daily(max(365, train_days + 30))
series = series_all[-train_days:]

st.write(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${series_all[-1]:,.2f}")

# ---------- –ú–û–î–ï–õ–¨ ARIMA ----------
def fit_forecast_arima(y: np.ndarray, steps: int, order: tuple[int,int,int], log: bool) -> np.ndarray:
    """–ü–æ–¥–≥–æ–Ω–∫–∞ ARIMA –∏ –ø—Ä–æ–≥–Ω–æ–∑ out-of-sample."""
    y_in = np.log(y) if log else y
    model = ARIMA(y_in, order=order, enforce_stationarity=False, enforce_invertibility=False)
    res = model.fit()
    fc = res.forecast(steps=steps)
    if log:
        fc = np.exp(fc)
    return np.asarray(fc, dtype=float)

forecast = fit_forecast_arima(series, forecast_h, (p, d, q), use_log)

# ---------- –ì–†–ê–§–ò–ö –í matplotlib ----------
fig, ax = plt.subplots(figsize=(10, 5), dpi=120)
ax.plot(range(len(series)), series, label="–ò—Å—Ç–æ—Ä–∏—è", color="#1f77b4")
ax.plot(range(len(series)-1, len(series)-1+forecast_h+1),
        np.concatenate([[series[-1]], forecast]),
        label="–ü—Ä–æ–≥–Ω–æ–∑", color="#ff7f0e")
ax.set_title(f"BTC/USD ‚Äî ARIMA{(p,d,q)} ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ {forecast_h} –¥–Ω.")
ax.set_xlabel("–î–Ω–∏")
ax.set_ylabel("USD")
ax.grid(True, alpha=0.3)
ax.legend()
st.pyplot(fig, use_container_width=True)

# ---------- –¢–ê–ë–õ–ò–¶–ê –ü–†–û–ì–ù–û–ó–ê ----------
tbl = pd.DataFrame({
    "–î–µ–Ω—å +": np.arange(1, forecast_h+1),
    "–ü—Ä–æ–≥–Ω–æ–∑, USD": forecast,
    "Œî% –∫ —Ç–µ–∫—É—â–µ–π": (forecast / series_all[-1] - 1.0) * 100.0
})
st.dataframe(tbl.style.format({"–ü—Ä–æ–≥–Ω–æ–∑, USD": "{:,.2f}", "Œî% –∫ —Ç–µ–∫—É—â–µ–π": "{:+.2f}%"}), use_container_width=True)

# ---------- –û–¢–ü–†–ê–í–ö–ê –í TELEGRAM ----------
def send_plot_to_telegram(fig, chat_id: str, caption: str = "") -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–∞–∫ —Ñ–æ—Ç–æ –≤ Telegram."""
    buf = io.BytesIO()
    fig.savefig(buf, format="png", bbox_inches="tight")
    buf.seek(0)
    files = {"photo": ("arima.png", buf, "image/png")}
    data = {"chat_id": chat_id, "caption": caption}
    try:
        r = requests.post(SEND_PHOTO_URL, data=data, files=files, timeout=30)
        return r.ok
    except Exception:
        return False

caption = f"ARIMA{(p,d,q)} BTC/USD\\n–¢–µ–∫—É—â–∞—è: ${series_all[-1]:,.2f}\\n–ì–æ—Ä–∏–∑–æ–Ω—Ç: {forecast_h} –¥–Ω."
if st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –≤ Telegram"):
    ok = send_plot_to_telegram(fig, TELEGRAM_CHAT_ID, caption)
    if ok:
        st.success("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
    else:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å —Ç–æ–∫–µ–Ω/—á–∞—Ç –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.")

st.caption(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now():%Y-%m-%d %H:%M:%S}")
