import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import requests
import time
import matplotlib.pyplot as plt
import io
import pytz

try:
    from binance import Client
except:
    from binance.spot import Spot as Client

# ========== TELEGRAM CREDENTIALS ==========
TELEGRAM_BOT_TOKEN = "5628451765:AAF3eghUBVePX-I_j3Rg2WvWKFGkx4u1F7M"
TELEGRAM_CHAT_ID = "204683255"

# ========== MOSCOW TIMEZONE ==========
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# ========== PAGE CONFIG ==========
st.set_page_config(
    page_title="ARIMA + Market Order Bubbles AUTO",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("üìä ARIMA + Market Order Bubbles (MOSCOW TIME)")
st.markdown("**–ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å –Ω–∞ 2-–π –º–∏–Ω—É—Ç–µ + —Ä—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ**")

# ========== SIDEBAR CONFIG ==========
with st.sidebar:
    st.title("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    symbol = st.text_input("–°–∏–º–≤–æ–ª", value="BTCUSDT")
    interval = st.selectbox("–¢–∞–π–º—Ñ—Ä–µ–π–º", ["1h", "4h", "1d"])
    forecast_steps = st.slider("–®–∞–≥–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞", 3, 14, 7)
    days_history = st.slider("–î–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏", 7, 365, 30)
    
    st.divider()
    st.success("‚úÖ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω")
    st.info("‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –ú–æ—Å–∫–≤–∞ (UTC+3)\nüì§ –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞: XX:02 –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞\nüöÄ –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: –ø–æ –∫–Ω–æ–ø–∫–µ")
    
    st.divider()
    st.title("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è")
    auto_mode = st.checkbox("üîÑ –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é", value=True)

# ========== STATE MANAGEMENT ==========
if 'last_send_hour' not in st.session_state:
    st.session_state.last_send_hour = -1
if 'messages_sent' not in st.session_state:
    st.session_state.messages_sent = []

# ========== HELPER FUNCTIONS ==========
def get_moscow_time():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ"""
    return datetime.now(MOSCOW_TZ)

def to_milliseconds(dt):
    return int(dt.timestamp() * 1000)

def get_historical_klines(symbol, interval, days):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å Binance"""
    try:
        client = Client()
        start_date = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d')
        start_ts = to_milliseconds(datetime.strptime(start_date, "%Y-%m-%d"))
        
        df = pd.DataFrame()
        limit = 1000
        
        while True:
            klines = client.get_klines(symbol=symbol, interval=interval, startTime=start_ts, limit=limit)
            if not klines:
                break
            
            temp_df = pd.DataFrame(klines, columns=[
                'Open time', 'Open', 'High', 'Low', 'Close', 'Volume',
                'Close time', 'Quote asset volume', 'Number of trades',
                'Taker buy base asset volume', 'Taker buy quote asset volume', 'Ignore'
            ])
            df = pd.concat([df, temp_df], ignore_index=True)
            
            last_open_time = int(temp_df['Open time'].iloc[-1])
            if len(klines) < limit:
                break
            start_ts = last_open_time + 1
        
        df['Open time'] = pd.to_datetime(df['Open time'], unit='ms')
        for col in ['Open', 'High', 'Low', 'Close', 'Volume']:
            df[col] = df[col].astype(float)
        
        df.drop_duplicates(subset=['Open time'], inplace=True)
        df.reset_index(drop=True, inplace=True)
        
        return df
    except Exception as e:
        return None

def calculate_market_order_bubbles(df, stdev_length=30, ema_length=30):
    """–í—ã—á–∏—Å–ª—è–µ—Ç Market Order Bubbles"""
    df = df.copy()
    df['Price_Change'] = df['Close'] - df['Open']
    df['Price_Change_Pct'] = (df['Price_Change'] / df['Open'].replace(0, 1)) * 100
    
    df['Volume_EMA'] = df['Volume'].ewm(span=ema_length, adjust=False).mean()
    df['Volume_STD'] = df['Volume'].rolling(window=stdev_length).std()
    
    df['Upper_Threshold'] = df['Volume_EMA'] + 1.0 * df['Volume_STD']
    df['Lower_Threshold'] = df['Volume_EMA'] + 0.5 * df['Volume_STD']
    
    df['Bubble_Type'] = 'None'
    df['Bubble_Size'] = 0
    df['Bubble_Strength'] = 0.0
    
    for i in range(max(stdev_length, ema_length), len(df)):
        current_volume = df.loc[i, 'Volume']
        current_price_change = df.loc[i, 'Price_Change_Pct']
        upper_threshold = df.loc[i, 'Upper_Threshold']
        lower_threshold = df.loc[i, 'Lower_Threshold']
        
        if pd.notna(upper_threshold) and pd.notna(lower_threshold):
            if current_price_change < -0.05 and current_volume > lower_threshold:
                strength = min(100.0, ((current_volume - lower_threshold) / (upper_threshold - lower_threshold + 0.1)) * 100)
                df.loc[i, 'Bubble_Type'] = 'Red'
                
                if current_volume > upper_threshold + (upper_threshold - lower_threshold) * 0.5:
                    df.loc[i, 'Bubble_Size'] = 4.5
                elif current_volume > upper_threshold:
                    df.loc[i, 'Bubble_Size'] = 3
                else:
                    df.loc[i, 'Bubble_Size'] = 2
                
                df.loc[i, 'Bubble_Strength'] = min(100.0, strength)
            
            elif current_price_change > 0.05 and current_volume > lower_threshold:
                strength = min(100.0, ((current_volume - lower_threshold) / (upper_threshold - lower_threshold + 0.1)) * 100)
                df.loc[i, 'Bubble_Type'] = 'Green'
                
                if current_volume > upper_threshold + (upper_threshold - lower_threshold) * 0.5:
                    df.loc[i, 'Bubble_Size'] = 4.5
                elif current_volume > upper_threshold:
                    df.loc[i, 'Bubble_Size'] = 3
                else:
                    df.loc[i, 'Bubble_Size'] = 2
                
                df.loc[i, 'Bubble_Strength'] = min(100.0, strength)
    
    return df

def calculate_arima_forecast(prices, forecast_steps=7):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ ARIMA"""
    try:
        model = ARIMA(prices, order=(6, 1, 12))
        model_fit = model.fit()
        forecast = model_fit.forecast(steps=forecast_steps)
        
        if isinstance(forecast, pd.Series):
            return np.array(forecast.values, dtype=float)
        else:
            return np.array(forecast, dtype=float)
    except Exception as e:
        return None

def create_chart_with_bubbles(df_with_bubbles, prices, title=""):
    """–°–æ–∑–¥–∞—ë—Ç –≥—Ä–∞—Ñ–∏–∫ —Å–≤–µ—á–µ–π —Å –ø—É–∑—ã—Ä—è–º–∏"""
    fig, ax = plt.subplots(figsize=(14, 6))
    
    plot_df = df_with_bubbles.iloc[-100:].copy()
    plot_df.reset_index(drop=True, inplace=True)
    
    for idx, row in plot_df.iterrows():
        color = 'green' if row['Close'] >= row['Open'] else 'red'
        ax.bar(idx, row['Close'] - row['Open'], bottom=row['Open'], color=color, width=0.6, alpha=0.7)
        ax.plot([idx, idx], [row['Low'], row['High']], color='black', linewidth=0.5)
    
    for idx, row in plot_df.iterrows():
        if row['Bubble_Type'] == 'Red':
            ax.scatter(idx, row['Low'], color='red', s=row['Bubble_Size']*200, marker='v', zorder=5, edgecolors='darkred', linewidth=2)
        elif row['Bubble_Type'] == 'Green':
            ax.scatter(idx, row['High'], color='lime', s=row['Bubble_Size']*200, marker='^', zorder=5, edgecolors='darkgreen', linewidth=2)
    
    ax.set_title(title, fontsize=16, fontweight='bold')
    ax.set_ylabel("–¶–µ–Ω–∞ (USD)", fontsize=12)
    ax.set_xlabel("–°–≤–µ—á–∏", fontsize=12)
    ax.grid(True, alpha=0.3)
    
    plt.tight_layout()
    return fig

def create_volume_chart(df_with_bubbles):
    """–°–æ–∑–¥–∞—ë—Ç –≥—Ä–∞—Ñ–∏–∫ –æ–±—ä—ë–º–∞"""
    fig, ax = plt.subplots(figsize=(14, 4))
    
    plot_df = df_with_bubbles.iloc[-100:].copy()
    plot_df.reset_index(drop=True, inplace=True)
    
    volumes = plot_df['Volume'].values
    bubble_types = plot_df['Bubble_Type'].values
    colors = ['red' if bt == 'Red' else ('lime' if bt == 'Green' else 'steelblue') for bt in bubble_types]
    
    ax.bar(range(len(volumes)), volumes, color=colors, alpha=0.7)
    ax.set_title("–û–±—ä—ë–º —Å Market Order Bubbles", fontsize=14, fontweight='bold')
    ax.set_ylabel("–û–±—ä—ë–º", fontsize=12)
    ax.grid(True, alpha=0.3, axis='y')
    
    plt.tight_layout()
    return fig

def create_forecast_chart(prices, arima_forecast):
    """–°–æ–∑–¥–∞—ë—Ç –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    fig, ax = plt.subplots(figsize=(14, 6))
    
    history = prices[-100:]
    forecast_data = arima_forecast
    
    x_hist = range(len(history))
    x_fore = range(len(history), len(history) + len(forecast_data))
    
    ax.plot(x_hist, history, label='–ò—Å—Ç–æ—Ä–∏—è', color='blue', linewidth=2.5, marker='o', markersize=3)
    ax.plot(x_fore, forecast_data, label='–ü—Ä–æ–≥–Ω–æ–∑ ARIMA', color='red', linewidth=2.5, marker='s', linestyle='--', markersize=5)
    ax.axvline(x=len(history)-1, color='gray', linestyle=':', linewidth=2)
    ax.fill_between(x_fore, forecast_data*0.99, forecast_data*1.01, alpha=0.2, color='red')
    
    ax.set_title("–ü—Ä–æ–≥–Ω–æ–∑ ARIMA(6,1,12)", fontsize=14, fontweight='bold')
    ax.set_ylabel("–¶–µ–Ω–∞ (USD)", fontsize=12)
    ax.set_xlabel("–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã", fontsize=12)
    ax.legend(fontsize=11, loc='upper left')
    ax.grid(True, alpha=0.3)
    
    plt.tight_layout()
    return fig

def fig_to_png_bytes(fig):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç figure –≤ PNG"""
    buf = io.BytesIO()
    fig.savefig(buf, format='png', dpi=100, bbox_inches='tight')
    buf.seek(0)
    plt.close(fig)
    return buf

def send_telegram_photo(photo_bytes, caption):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendPhoto"
        files = {'photo': photo_bytes}
        data = {
            'chat_id': TELEGRAM_CHAT_ID,
            'caption': caption,
            'parse_mode': 'HTML'
        }
        
        response = requests.post(url, files=files, data=data, timeout=30)
        return response.json().get('ok', False)
    except:
        return False

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ Telegram"""
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        data = {
            'chat_id': TELEGRAM_CHAT_ID,
            'text': message,
            'parse_mode': 'HTML'
        }
        
        response = requests.post(url, data=data, timeout=30)
        return response.json().get('ok', False)
    except:
        return False

def generate_recommendations(prices, arima_forecast, df_with_bubbles):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    recommendations = ""
    
    current_price = prices[-1]
    forecast_avg = np.mean(arima_forecast)
    
    if forecast_avg > current_price * 1.01:
        recommendations += "üìà <b>ARIMA:</b> –†–û–°–¢\n"
    elif forecast_avg < current_price * 0.99:
        recommendations += "üìâ <b>ARIMA:</b> –ü–ê–î–ï–ù–ò–ï\n"
    else:
        recommendations += "‚û°Ô∏è <b>ARIMA:</b> –ë–æ–∫–æ–≤–∏–∫\n"
    
    recent_bubbles = df_with_bubbles[df_with_bubbles['Bubble_Type'] != 'None'].tail(3)
    
    if len(recent_bubbles) > 0:
        last_bubble = recent_bubbles.iloc[-1]
        
        if last_bubble['Bubble_Type'] == 'Red':
            recommendations += "üî¥ <b>–ü–£–ó–´–†–¨:</b> –ü–†–û–î–ê–ñ–ò ‚Üí –û–¢–°–ö–û–ö –≤–≤–µ—Ä—Ö\n"
        else:
            recommendations += "üü¢ <b>–ü–£–ó–´–†–¨:</b> –ü–û–ö–£–ü–ö–ò ‚Üí –û–¢–ö–ê–¢ –≤–Ω–∏–∑\n"
    
    recommendations += "\n<b>üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:</b>\n"
    
    red_count = len(df_with_bubbles[df_with_bubbles['Bubble_Type'] == 'Red'])
    green_count = len(df_with_bubbles[df_with_bubbles['Bubble_Type'] == 'Green'])
    
    if forecast_avg > current_price and red_count > green_count:
        recommendations += "üéØ <b>–ü–û–ö–£–ü–ö–ê</b>\n"
    elif forecast_avg < current_price and green_count > red_count:
        recommendations += "üéØ <b>–ü–†–û–î–ê–ñ–ê</b>\n"
    else:
        recommendations += "‚è≥ <b>–û–ñ–ò–î–ê–ù–ò–ï</b>\n"
    
    recommendations += f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    recommendations += f"   üî¥ –ö—Ä–∞—Å–Ω—ã–µ: {red_count} | üü¢ –ó–µ–ª—ë–Ω—ã–µ: {green_count}\n"
    
    return recommendations

def run_hourly_analysis(symbol, interval, forecast_steps, days_history):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
    
    df = get_historical_klines(symbol, interval, days_history)
    
    if df is None or len(df) < 100:
        return False
    
    prices = df['Close'].values
    arima_forecast = calculate_arima_forecast(prices, forecast_steps)
    
    if arima_forecast is None:
        return False
    
    df_with_bubbles = calculate_market_order_bubbles(df)
    current_price = prices[-1]
    
    moscow_time = get_moscow_time()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    header_msg = f"<b>üìä –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –û–¢–ß–Å–¢</b>\n"
    header_msg += f"<b>–í—Ä–µ–º—è (–ú–°–ö):</b> {moscow_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
    header_msg += f"<b>{symbol}</b> | {interval}\n"
    header_msg += f"<b>–¶–µ–Ω–∞:</b> ${current_price:.2f}\n"
    send_telegram_message(header_msg)
    time.sleep(0.5)
    
    # –°–≤–µ—á–∏
    fig = create_chart_with_bubbles(df_with_bubbles, prices, f"–°–≤–µ—á–∏ {symbol}")
    send_telegram_photo(fig_to_png_bytes(fig), "üìä –ì—Ä–∞—Ñ–∏–∫ —Å–≤–µ—á–µ–π —Å –ø—É–∑—ã—Ä—è–º–∏")
    time.sleep(0.5)
    
    # –û–±—ä—ë–º
    fig = create_volume_chart(df_with_bubbles)
    send_telegram_photo(fig_to_png_bytes(fig), "üìä –ì—Ä–∞—Ñ–∏–∫ –æ–±—ä—ë–º–∞")
    time.sleep(0.5)
    
    # –ü—Ä–æ–≥–Ω–æ–∑
    fig = create_forecast_chart(prices, arima_forecast)
    send_telegram_photo(fig_to_png_bytes(fig), "üìà –ü—Ä–æ–≥–Ω–æ–∑ ARIMA")
    time.sleep(0.5)
    
    # –¢–∞–±–ª–∏—Ü–∞
    forecast_msg = f"<b>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {forecast_steps} —à–∞–≥–æ–≤:</b>\n\n"
    for i, price in enumerate(arima_forecast, 1):
        change = ((price - current_price) / current_price) * 100
        arrow = "üìà" if change > 0 else "üìâ"
        forecast_msg += f"{arrow} {i}: ${price:.2f} ({change:+.2f}%)\n"
    send_telegram_message(forecast_msg)
    time.sleep(0.5)
    
    # –ü—É–∑—ã—Ä–∏
    red_count = len(df_with_bubbles[df_with_bubbles['Bubble_Type'] == 'Red'])
    green_count = len(df_with_bubbles[df_with_bubbles['Bubble_Type'] == 'Green'])
    
    bubbles_msg = f"<b>üî¥üü¢ –ü–£–ó–´–†–ò</b>\n"
    bubbles_msg += f"üî¥ {red_count} | üü¢ {green_count}\n\n"
    
    recent = df_with_bubbles[df_with_bubbles['Bubble_Type'] != 'None'].tail(3)
    if len(recent) > 0:
        bubbles_msg += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ:</b>\n"
        for idx, row in recent.iterrows():
            size = 'S' if row['Bubble_Size'] == 2 else ('M' if row['Bubble_Size'] == 3 else 'L')
            t = "üî¥" if row['Bubble_Type'] == 'Red' else "üü¢"
            bubbles_msg += f"{t} {size} {row['Bubble_Strength']:.0f}%\n"
    
    send_telegram_message(bubbles_msg)
    time.sleep(0.5)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    send_telegram_message(generate_recommendations(prices, arima_forecast, df_with_bubbles))
    
    return True

# ========== MAIN ==========
if auto_mode:
    st.markdown("---")
    
    moscow_time = get_moscow_time()
    current_hour = moscow_time.hour
    current_minute = moscow_time.minute
    
    # ‚úÖ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ù–ê 2-–π –ú–ò–ù–£–¢–ï –ö–ê–ñ–î–û–ì–û –ß–ê–°–ê (2:02, 3:02, 4:02 –∏ —Ç.–¥.)
    should_send = (current_minute == 2) and (st.session_state.last_send_hour != current_hour)
    
    if should_send:
        with st.spinner("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Ç—á—ë—Ç –≤ Telegram (–ú–°–ö)..."):
            if run_hourly_analysis(symbol, interval, forecast_steps, days_history):
                st.session_state.last_send_hour = current_hour
                st.session_state.messages_sent.append(moscow_time)
                st.success(f"‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {moscow_time.strftime('%H:%M:%S')} –ú–°–ö")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("üïê –í—Ä–µ–º—è (–ú–°–ö)", moscow_time.strftime('%H:%M:%S'))
    with col2:
        st.metric("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", len(st.session_state.messages_sent))
    with col3:
        st.metric("ü§ñ –°—Ç–∞—Ç—É—Å", "üü¢ –†–ê–ë–û–¢–ê–ï–¢")
    
    st.markdown("---")
    st.subheader("üöÄ –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞")
    if st.button("üì§ –û–¢–ü–†–ê–í–ò–¢–¨ –û–¢–ß–Å–¢ –ü–†–Ø–ú–û –°–ï–ô–ß–ê–°", use_container_width=True, type="primary"):
        with st.spinner("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Telegram..."):
            if run_hourly_analysis(symbol, interval, forecast_steps, days_history):
                st.session_state.messages_sent.append(get_moscow_time())
                st.success("‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏")
    
    # –ò—Å—Ç–æ—Ä–∏—è
    st.subheader("üì§ –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–æ–∫")
    if st.session_state.messages_sent:
        data = [{"–í—Ä–µ–º—è (–ú–°–ö)": t.strftime('%Y-%m-%d %H:%M:%S')} for t in st.session_state.messages_sent[-10:]]
        st.dataframe(pd.DataFrame(data), use_container_width=True, hide_index=True)

st.markdown("""
<script>
setTimeout(() => window.location.reload(), 60000);
</script>
""", unsafe_allow_html=True)

st.divider()
st.markdown("<div style='text-align:center;color:gray;font-size:11px;'>ü§ñ ARIMA + Bubbles AUTO v4.0 | –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3) | –ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∞ XX:02 | –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ</div>", unsafe_allow_html=True)
